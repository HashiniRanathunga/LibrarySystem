/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */




import Controller.NumericTextFieldKeyListener1;
import Model.Dbconnection;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Color;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import Controller.LettersSpaceDotTextFieldKeyListener1;




/**
 *
 * @author Dell
 */
public class NewStudent extends javax.swing.JFrame {

    /**
     * Creates new form NewStudent
     */
    public NewStudent() {
        initComponents();
         DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("StudentID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Father name");
        tableModel.addColumn(" Course");
        tableModel.addColumn("Branch");
        studentList.setModel(tableModel);

        // Fetch and display existing car data from the database
        displayExistingNewStudentData();
        loadCoursename();
        txtStudentID.addKeyListener(new NumericTextFieldKeyListener1());
        txtName.addKeyListener(new LettersSpaceDotTextFieldKeyListener1());
        txtfather.addKeyListener(new LettersSpaceDotTextFieldKeyListener1());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtfather = new javax.swing.JTextField();
        txtcourse = new javax.swing.JComboBox<>();
        txtbranch = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentList = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Student ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Father Name");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Course Name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Branch Name");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        txtStudentID.setBackground(new java.awt.Color(255, 255, 204));
        txtStudentID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtStudentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 216, -1));

        txtName.setBackground(new java.awt.Color(255, 255, 204));
        txtName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 216, -1));

        txtfather.setBackground(new java.awt.Color(255, 255, 204));
        txtfather.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtfather, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 216, -1));

        txtcourse.setBackground(new java.awt.Color(255, 255, 204));
        txtcourse.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtcourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Education", "Novels", "English" }));
        txtcourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcourseActionPerformed(evt);
            }
        });
        getContentPane().add(txtcourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 214, -1));

        txtbranch.setBackground(new java.awt.Color(255, 255, 204));
        txtbranch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtbranch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Colombo", "Galle", "Kandy" }));
        txtbranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbranchActionPerformed(evt);
            }
        });
        getContentPane().add(txtbranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 214, -1));

        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 390, -1, -1));

        studentList.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        studentList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Father Name", "Course Name", "Branch Name"
            }
        ));
        jScrollPane1.setViewportView(studentList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 600, 180));

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 390, -1, -1));

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dis.jpg"))); // NOI18N
        jLabel7.setText("jLabel7");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveStudentToDatabase() {
    String id = txtStudentID.getText();     
    String Name = txtName.getText();
    String Father = txtfather.getText();
    String Course = (String) txtcourse.getSelectedItem();
    String Branch= (String) txtbranch.getSelectedItem();
    

    try {
        try ( // Establish a database connection
                 Connection connection = dbConnection.getConnection();){
            String sql = "INSERT INTO Students (Student_ID,StudentName,FatherName,CourseName,Branchname) VALUES (?, ?, ?, ?,?)";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, id);
             preparedStatement.setString(2, Name);
            preparedStatement.setString(3, Father);
            preparedStatement.setString(4, Course);
            preparedStatement.setString(5, Branch);
            
            
            int rowsAffected = preparedStatement.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Student added successfully.");
                // Clear the input fields after successful insertion
                txtStudentID.setText(""); 
                txtName.setText("");
                txtfather.setText("");
                txtcourse.setSelectedIndex(0);
                txtbranch.setSelectedIndex(0); // Reset to the first status option
              
                
                DefaultTableModel tableModel = (DefaultTableModel) studentList.getModel();
            tableModel.addRow(new Object[]{id,Name, Father, Course, Branch});
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add student.");
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
    
    private void txtbranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbranchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbranchActionPerformed

    private void txtcourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcourseActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
          int selectedRow = studentList.getSelectedRow();
        if (selectedRow != -1) {
            // Get the updated data from the text fields and combo box
            String updatedid = txtStudentID.getText();
            String updatedName =txtName.getText();
            String updatedFather = txtfather.getText();
            String updatedCourse = (String)txtcourse.getSelectedItem();
            String updatedBranch = (String) txtbranch.getSelectedItem();

            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to update this student?", "Confirm Update", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Update the data in the table (user interface)
                DefaultTableModel tableModel = (DefaultTableModel) studentList.getModel();
                tableModel.setValueAt(updatedid, selectedRow, 0);
                tableModel.setValueAt(updatedName, selectedRow, 1);
                tableModel.setValueAt(updatedFather, selectedRow, 2);
                tableModel.setValueAt(updatedCourse, selectedRow, 3);
                tableModel.setValueAt(updatedBranch, selectedRow, 4);

                // Update the data in the MySQL table
                try {
                    // Establish a database connection
                    Connection connection = Dbconnection.getConnection();

                    // Define the SQL query to update the record in the database
                    String sql = "UPDATE Students SET StudentName= ?FatherName=?,CourseName=?, Branchname=? WHERE Student_ID=?";

                    // Prepare the statement
                    PreparedStatement preparedStatement = connection.prepareStatement(sql);
                    preparedStatement.setString(1, updatedName);
                    preparedStatement.setString(2, updatedFather);
                    preparedStatement.setString(3, updatedCourse);
                    preparedStatement.setString(4, updatedBranch);
                    preparedStatement.setString(5, updatedid);

                    // Execute the update
                    int rowsAffected = preparedStatement.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "student details updated successfully.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update student details in the database.");
                    }

                    // Close the database connection
                    connection.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a student details to update.");
        }
       // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       saveStudentToDatabase();
       // TODO add your handling code here:
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = studentList.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this student details?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                DefaultTableModel tableModel = (DefaultTableModel) studentList.getModel();

                // Get the carRegistration value from the selected row
                String studentID = (String) tableModel.getValueAt(selectedRow, 0);
                // Remove the selected row from the table
                tableModel.removeRow(selectedRow);

                try {
                    try ( // Establish a database connection
                        Connection connection = Dbconnection.getConnection();  )    {
                        String sql = "DELETE FROM students WHERE studentID = ?";

                        PreparedStatement preparedStatement = connection.prepareStatement(sql);
                        preparedStatement.setString(1, studentID);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "student details deleted successfully.");
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to delete student details from the database.");
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a student detail to delete.");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    
        private void loadCoursename() {
        try {
            // Establish a database connection
            try (Connection connection = Dbconnection.getConnection();) {
                String sql = "SELECT studentid FROM NewStudenttable ";
                PreparedStatement preparedStatement = connection.prepareStatement(sql);
                ResultSet resultSet = preparedStatement.executeQuery();

                // Create a DefaultComboBoxModel to store the car registration data
                DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

                // Iterate through the result set and add car registration values to the model
                while (resultSet.next()) {
                    String classid = resultSet.getString("studentid");
                    comboBoxModel.addElement(classid);
                }

                // Set the model with car registration data to the carCom JComboBox
                txtcourse.setModel(comboBoxModel);
                txtbranch.setModel(comboBoxModel);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }
    
        private void displayExistingNewStudentData() {
    try {
        try ( // Establish a database connection
              Connection connection = Dbconnection.getConnection();) {
            String sql = "SELECT Student_ID, StudentName, FatherName, CourseName, BranchName  FROM NewStudent";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            
            DefaultTableModel tableModel = (DefaultTableModel) studentList.getModel();
            
            while (resultSet.next()) {
                String StudentID = resultSet.getString("StudentID");
                String Name = resultSet.getString("studentname");
                String FatherName = resultSet.getString("fathername");
                String CourseName = resultSet.getString("coursename");
                String BranchName = resultSet.getString("branchname");
                // Add the fetched data as a new row in the table
                tableModel.addRow(new Object[]{StudentID, Name, FatherName, CourseName, BranchName});
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue .invokeLater(new Runnable() {
            public void run() {
                new NewStudent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable studentList;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtStudentID;
    private javax.swing.JComboBox<String> txtbranch;
    private javax.swing.JComboBox<String> txtcourse;
    private javax.swing.JTextField txtfather;
    // End of variables declaration//GEN-END:variables
}
