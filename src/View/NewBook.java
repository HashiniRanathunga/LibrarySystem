/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
  package View;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Color;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import Controller.NumericTextFieldKeyListener1;
import Controller.LettersSpaceDotTextFieldKeyListener1;
/**
 *
 * @author Dell
 */
public class NewBook extends javax.swing.JFrame {

    /**
     * Creates new form NewBook
     */
    public NewBook() {
        initComponents();
         DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("BookID");
        tableModel.addColumn("Name");
        tableModel.addColumn("Publisher");
        tableModel.addColumn("Price");
        tableModel.addColumn("Year");
        bookList.setModel(tableModel);

        // Fetch and display existing car data from the database
        displayExistingStudentData();
        txtPrice.addKeyListener(new NumericTextFieldKeyListener1());
        txtID.addKeyListener(new LettersSpaceDotTextFieldKeyListener1());
        txtBookname.addKeyListener(new LettersSpaceDotTextFieldKeyListener1());
        txtPublisher.addKeyListener(new LettersSpaceDotTextFieldKeyListener1());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtBookname = new javax.swing.JTextField();
        txtPublisher = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        AddSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookList = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(325, 125));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Book ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 70, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 204));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 204));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Publisher");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 204));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Price");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, -1));

        jLabel5.setBackground(new java.awt.Color(255, 255, 204));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Publisher Year");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        txtID.setBackground(new java.awt.Color(255, 255, 204));
        txtID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtID, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 220, -1));

        txtBookname.setBackground(new java.awt.Color(255, 255, 204));
        txtBookname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtBookname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBooknameActionPerformed(evt);
            }
        });
        getContentPane().add(txtBookname, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 220, -1));

        txtPublisher.setBackground(new java.awt.Color(255, 255, 204));
        txtPublisher.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtPublisher, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 220, -1));

        txtPrice.setBackground(new java.awt.Color(255, 255, 204));
        txtPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceActionPerformed(evt);
            }
        });
        getContentPane().add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 220, -1));

        txtYear.setBackground(new java.awt.Color(255, 255, 204));
        txtYear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 220, -1));

        AddSave.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AddSave.setText("Add");
        AddSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSaveActionPerformed(evt);
            }
        });
        getContentPane().add(AddSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, -1, -1));

        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 400, -1, -1));

        bookList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Name", "Publisher", "Price", "Publisher Year"
            }
        ));
        jScrollPane1.setViewportView(bookList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 620, 190));

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 400, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dis.jpg"))); // NOI18N
        jLabel6.setText("jLabel6");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     private void saveBookToDatabase() {
    String id = txtID.getText();     
    String Name = txtBookname.getText();
    String Publisher = txtPublisher.getText();
    String Price = txtPrice.getText();
    String Year = txtYear.getText();
    

    try {
        try ( // Establish a database connection
                  Connection connection = dbConnection.getConnection();){
            String sql = "INSERT INTO NewBook (Book_ID, BookName, BookPublisher, BookPrice, PublisherYear) VALUES (?, ?, ?, ?,?)";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, id);
             preparedStatement.setString(2, Name);
            preparedStatement.setString(3, Publisher);
            preparedStatement.setString(4, Price);
            preparedStatement.setString(5, Year);
            
            
            int rowsAffected = preparedStatement.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Book added successfully.");
                // Clear the input fields after successful insertion
                txtID.setText(""); 
               txtBookname.setText("");
               txtPublisher.setText("");
                txtPrice.setText("");
                txtYear.setText(""); // Reset to the first status option
              
                
                DefaultTableModel tableModel = (DefaultTableModel) bookList.getModel();
            tableModel.addRow(new Object[]{id,Name, Publisher, Price, Year});
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add book.");
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
    
    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    private void AddSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSaveActionPerformed
         saveBookToDatabase();
         // TODO add your handling code here:
        
    }//GEN-LAST:event_AddSaveActionPerformed

    private void txtBooknameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBooknameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBooknameActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
          int selectedRow = bookList.getSelectedRow();
        if (selectedRow != -1) {
            // Get the updated data from the text fields and combo box
            String updatedid =  txtID.getText();
            String updatedName = txtBookname.getText();
            String updatedPublisher = txtPublisher.getText();
            String updatedPrice = txtPrice.getText();
            String updatedYear = txtYear.getText();

            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to update this book?", "Confirm Update", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Update the data in the table (user interface)
                DefaultTableModel tableModel = (DefaultTableModel) bookList.getModel();
                tableModel.setValueAt(updatedid, selectedRow, 0);
                tableModel.setValueAt(updatedName, selectedRow, 1);
                tableModel.setValueAt(updatedPublisher, selectedRow, 2);
                tableModel.setValueAt(updatedPrice, selectedRow, 3);
                tableModel.setValueAt(updatedYear, selectedRow, 4);

                // Update the data in the MySQL table
                try {
                    // Establish a database connection
                    Connection connection = dbConnection.getConnection();

                    // Define the SQL query to update the record in the database
                    String sql = "UPDATE NewBook SET Book_ID= ? BookName=?, BookPublisher=?, BookPrice=?, PublisherYear  WHERE Book_ID =?";

                    // Prepare the statement
                    PreparedStatement preparedStatement = connection.prepareStatement(sql);
                    preparedStatement.setString(1, updatedName);
                    preparedStatement.setString(2, updatedPublisher);
                    preparedStatement.setString(3, updatedPrice);
                    preparedStatement.setString(4, updatedYear);
                    preparedStatement.setString(5, updatedid);

                    // Execute the update
                    int rowsAffected = preparedStatement.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "book details updated successfully.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update book details in the database.");
                    }

                    // Close the database connection
                    connection.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a book details to update.");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = bookList.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this book details?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                DefaultTableModel tableModel = (DefaultTableModel) bookList.getModel();

                // Get the carRegistration value from the selected row
                String bookID = (String) tableModel.getValueAt(selectedRow, 0);
                // Remove the selected row from the table
                tableModel.removeRow(selectedRow);

                try {
                    try ( // Establish a database connection
                        Connection connection = dbConnection.getConnection();  )    {
                        String sql = "DELETE FROM NewBook WHERE Book_ID  = ?";

                        PreparedStatement preparedStatement = connection.prepareStatement(sql);
                        preparedStatement.setString(1, bookID);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "book details deleted successfully.");
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to delete book details from the database.");
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a book detail to delete.");
        }
         // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed
    /**
     * @param args the command line arguments
     */
    
    
    private void displayExistingStudentData() {
    try {
        try ( // Establish a database connection
              Connection connection = dbConnection.getConnection();) {
            String sql = "Book_ID, BookName, BookPublisher, BookPrice, PublisherYear FROM NewBook";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            
            DefaultTableModel tableModel = (DefaultTableModel) bookList.getModel();
            
            while (resultSet.next()) {
                String BookID = resultSet.getString("BookID");
                String BookName = resultSet.getString("Bookname");
                String BookPublisher = resultSet.getString("BookPublisher");
                String BookPrice = resultSet.getString("BookPrice");
                String PublisherYear= resultSet.getString("PublisherYear");
                
                // Add the fetched data as a new row in the table
                tableModel.addRow(new Object[]{BookID, BookName, BookPublisher, BookPrice,PublisherYear});
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Students().setVisible(true);
            }
        });
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSave;
    private javax.swing.JTable bookList;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtBookname;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
