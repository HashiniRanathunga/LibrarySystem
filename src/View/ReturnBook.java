
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package View;

import Controller.LettersSpaceDotTextFieldKeyListener1;
import Controller.NumericTextFieldKeyListener1;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import Model.Dbconnection;
import java.awt.Color;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import Controller.LettersSpaceDotTextFieldKeyListener1;

/**
 *
 * @author Dell
 */
public class ReturnBook extends javax.swing.JFrame {

    /**
     * Creates new form ReturnBook
     */
    public ReturnBook() {
        initComponents();
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("BookID");
        tableModel.addColumn("StudentID");
        tableModel.addColumn("Issue Date");
        tableModel.addColumn("Return Date");
        returnList.setModel(tableModel);

        // Fetch and display existing car data from the database
        displayExistingReturnBookData();
        txtReturnbookID.addKeyListener(new NumericTextFieldKeyListener1());
        txtIssuestudentID.addKeyListener(new LettersSpaceDotTextFieldKeyListener1());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtReturnbookID = new javax.swing.JTextField();
        txtIssuestudentID = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        returnList = new javax.swing.JTable();
        returndateSelector = new com.toedter.calendar.JDateChooser();
        issuedateSelector = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(325, 125));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Book ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Student ID");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Issue Date");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Return Date");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, -1));

        txtReturnbookID.setBackground(new java.awt.Color(255, 255, 204));
        txtReturnbookID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtReturnbookID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 215, -1));

        txtIssuestudentID.setBackground(new java.awt.Color(255, 255, 204));
        txtIssuestudentID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtIssuestudentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 215, -1));

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, -1, -1));

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 400, -1, -1));

        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 400, -1, -1));

        returnList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Book ID", "Student Id", "Issue Date", "Due Date"
            }
        ));
        jScrollPane1.setViewportView(returnList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 640, 190));
        getContentPane().add(returndateSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 140, -1));
        getContentPane().add(issuedateSelector, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 140, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/dis.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
     private void saveReturnBookToDatabase() {
     String book_ID =txtReturnbookID.getText();     
     String student_ID = txtIssuestudentID.getText();
     Date IssueDate = issuedateSelector.getDate(); 
     Date ReturnDate = returndateSelector.getDate();
    

    try {
        try ( // Establish a database connection
                 Connection connection = Dbconnection.getConnection();){
            String sql = "INSERT INTO ReturnBook (ReturnBook_Id,Book_ID,Student_ID,IssueDate,ReturnDate) VALUES (?, ?, ?, ?,?)";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, book_ID);
             preparedStatement.setString(2, student_ID);
            preparedStatement.setDate(3, new java.sql.Date(IssueDate.getTime()));
            preparedStatement.setDate(3, new java.sql.Date(ReturnDate.getTime()));
            
            
            
            int rowsAffected = preparedStatement.executeUpdate();
            
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Book returned successfully.");
                // Clear the input fields after successful insertion
                txtReturnbookID.setText(""); 
                txtIssuestudentID.setText("");
                issuedateSelector.setDate(null);
                returndateSelector.setDate(null);
                
              
                
                DefaultTableModel tableModel = (DefaultTableModel) returnList.getModel();
            tableModel.addRow(new Object[]{book_ID, student_ID, IssueDate, ReturnDate});
            } else {
                JOptionPane.showMessageDialog(this, "Failed to return book.");
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
         saveReturnBookToDatabase();
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = returnList.getSelectedRow();
        if (selectedRow != -1) {
            // Get the updated data from the text fields and combo box
            String updatedBookID = txtReturnbookID.getText();
            String updatedStudentID = txtIssuestudentID.getText();
            Date updatedIssueDate = issuedateSelector.getDate();
            Date updatedReturnDate = returndateSelector.getDate();

            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to update this return book?", "Confirm Update", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Update the data in the table (user interface)
                DefaultTableModel tableModel = (DefaultTableModel) returnList.getModel();
                tableModel.setValueAt(updatedBookID, selectedRow, 0);
                tableModel.setValueAt(updatedStudentID, selectedRow, 1);
                tableModel.setValueAt(updatedIssueDate, selectedRow, 2);
                tableModel.setValueAt(updatedReturnDate, selectedRow, 3);

                // Update the data in the MySQL table
                try {
                    // Establish a database connection
                    Connection connection = Dbconnection.getConnection();

                    // Define the SQL query to update the record in the database
                    String sql = "UPDATE ReturnBook SET Book_ID= ? Student_ID=?, IssueDate=?, ReturnDate=? WHERE ReturnBook_Id=?";

                    // Prepare the statement
                    PreparedStatement preparedStatement = connection.prepareStatement(sql);
                    preparedStatement.setString(1, updatedBookID);
                    preparedStatement.setString(3, updatedStudentID);
                    preparedStatement.setDate(4, new java.sql.Date(updatedIssueDate.getTime()));
                    preparedStatement.setDate(5, new java.sql.Date(updatedReturnDate.getTime()));

                    // Execute the update
                    int rowsAffected = preparedStatement.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Return book updated successfully.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to update return book in the database.");
                    }

                    // Close the database connection
                    connection.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a return book to update.");
        }
        // TODO add your handling code here:        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
         int selectedRow = returnList.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this return book details?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                DefaultTableModel tableModel = (DefaultTableModel) returnList.getModel();

                // Get the carRegistration value from the selected row
                String bookID = (String) tableModel.getValueAt(selectedRow, 0);
                // Remove the selected row from the table
                tableModel.removeRow(selectedRow);

                try {
                    try ( // Establish a database connection
                        Connection connection = Dbconnection.getConnection();  )    {
                        String sql = "DELETE FROM ReturnBook WHERE ReturnBook_Id = ?";

                        PreparedStatement preparedStatement = connection.prepareStatement(sql);
                        preparedStatement.setString(1, bookID);

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "Return book details details deleted successfully.");
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to delete return book details from the database.");
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a return book to delete.");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    private void displayExistingReturnBookData() {
    try {
        try ( // Establish a database connection
              Connection connection = Dbconnection.getConnection();) {
            String sql = "SELECT ReturnBook_Id, Book_ID, Student_ID, IssueDate, ReturnDate  FROM ReturnBook";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            DefaultTableModel tableModel = (DefaultTableModel) returnList.getModel();
            
            while (resultSet.next()) {
                String BookID = resultSet.getString("BookID");
                String StudentID = resultSet.getString("StudentID");
                Date IssueDate = resultSet.getDate("IssueDate");
                Date ReturnDate = resultSet.getDate("ReturnDate");
                
                // Add the fetched data as a new row in the table
                tableModel.addRow(new Object[]{BookID, StudentID, IssueDate, ReturnDate});
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
    }
}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReturnBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser issuedateSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable returnList;
    private com.toedter.calendar.JDateChooser returndateSelector;
    private javax.swing.JTextField txtIssuestudentID;
    private javax.swing.JTextField txtReturnbookID;
    // End of variables declaration//GEN-END:variables
}
